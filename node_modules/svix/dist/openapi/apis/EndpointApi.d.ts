import { BaseAPIRequestFactory } from './baseapi';
import { Configuration } from '../configuration';
import { RequestContext, ResponseContext } from '../http/http';
import { EndpointIn } from '../models/EndpointIn';
import { EndpointOut } from '../models/EndpointOut';
import { EndpointSecretOut } from '../models/EndpointSecretOut';
import { EndpointStats } from '../models/EndpointStats';
import { ListResponseEndpointOut } from '../models/ListResponseEndpointOut';
export declare class EndpointApiRequestFactory extends BaseAPIRequestFactory {
    createEndpointApiV1AppAppIdEndpointPost(appId: string, endpointIn: EndpointIn, _options?: Configuration): Promise<RequestContext>;
    deleteEndpointApiV1AppAppIdEndpointEndpointIdDelete(endpointId: string, appId: string, _options?: Configuration): Promise<RequestContext>;
    getEndpointApiV1AppAppIdEndpointEndpointIdGet(endpointId: string, appId: string, _options?: Configuration): Promise<RequestContext>;
    getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGet(endpointId: string, appId: string, _options?: Configuration): Promise<RequestContext>;
    getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGet(endpointId: string, appId: string, _options?: Configuration): Promise<RequestContext>;
    listEndpointsApiV1AppAppIdEndpointGet(appId: string, iterator?: string, limit?: number, _options?: Configuration): Promise<RequestContext>;
    updateEndpointApiV1AppAppIdEndpointEndpointIdPut(endpointId: string, appId: string, endpointIn: EndpointIn, _options?: Configuration): Promise<RequestContext>;
}
export declare class EndpointApiResponseProcessor {
    createEndpointApiV1AppAppIdEndpointPost(response: ResponseContext): Promise<EndpointOut>;
    deleteEndpointApiV1AppAppIdEndpointEndpointIdDelete(response: ResponseContext): Promise<void>;
    getEndpointApiV1AppAppIdEndpointEndpointIdGet(response: ResponseContext): Promise<EndpointOut>;
    getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGet(response: ResponseContext): Promise<EndpointSecretOut>;
    getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGet(response: ResponseContext): Promise<EndpointStats>;
    listEndpointsApiV1AppAppIdEndpointGet(response: ResponseContext): Promise<ListResponseEndpointOut>;
    updateEndpointApiV1AppAppIdEndpointEndpointIdPut(response: ResponseContext): Promise<EndpointOut>;
}
