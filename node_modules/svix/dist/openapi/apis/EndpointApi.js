"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EndpointApiResponseProcessor = exports.EndpointApiRequestFactory = void 0;
const baseapi_1 = require("./baseapi");
const http_1 = require("../http/http");
const ObjectSerializer_1 = require("../models/ObjectSerializer");
const exception_1 = require("./exception");
const util_1 = require("../util");
class EndpointApiRequestFactory extends baseapi_1.BaseAPIRequestFactory {
    createEndpointApiV1AppAppIdEndpointPost(appId, endpointIn, _options) {
        return __awaiter(this, void 0, void 0, function* () {
            let _config = _options || this.configuration;
            if (appId === null || appId === undefined) {
                throw new baseapi_1.RequiredError('Required parameter appId was null or undefined when calling createEndpointApiV1AppAppIdEndpointPost.');
            }
            if (endpointIn === null || endpointIn === undefined) {
                throw new baseapi_1.RequiredError('Required parameter endpointIn was null or undefined when calling createEndpointApiV1AppAppIdEndpointPost.');
            }
            const localVarPath = '/api/v1/app/{app_id}/endpoint/'
                .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)));
            const requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.POST);
            requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
            const contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                "application/json"
            ]);
            requestContext.setHeaderParam("Content-Type", contentType);
            const serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(endpointIn, "EndpointIn", ""), contentType);
            requestContext.setBody(serializedBody);
            let authMethod = null;
            authMethod = _config.authMethods["HTTPBearer"];
            if (authMethod) {
                yield authMethod.applySecurityAuthentication(requestContext);
            }
            return requestContext;
        });
    }
    deleteEndpointApiV1AppAppIdEndpointEndpointIdDelete(endpointId, appId, _options) {
        return __awaiter(this, void 0, void 0, function* () {
            let _config = _options || this.configuration;
            if (endpointId === null || endpointId === undefined) {
                throw new baseapi_1.RequiredError('Required parameter endpointId was null or undefined when calling deleteEndpointApiV1AppAppIdEndpointEndpointIdDelete.');
            }
            if (appId === null || appId === undefined) {
                throw new baseapi_1.RequiredError('Required parameter appId was null or undefined when calling deleteEndpointApiV1AppAppIdEndpointEndpointIdDelete.');
            }
            const localVarPath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}/'
                .replace('{' + 'endpoint_id' + '}', encodeURIComponent(String(endpointId)))
                .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)));
            const requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.DELETE);
            requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
            let authMethod = null;
            authMethod = _config.authMethods["HTTPBearer"];
            if (authMethod) {
                yield authMethod.applySecurityAuthentication(requestContext);
            }
            return requestContext;
        });
    }
    getEndpointApiV1AppAppIdEndpointEndpointIdGet(endpointId, appId, _options) {
        return __awaiter(this, void 0, void 0, function* () {
            let _config = _options || this.configuration;
            if (endpointId === null || endpointId === undefined) {
                throw new baseapi_1.RequiredError('Required parameter endpointId was null or undefined when calling getEndpointApiV1AppAppIdEndpointEndpointIdGet.');
            }
            if (appId === null || appId === undefined) {
                throw new baseapi_1.RequiredError('Required parameter appId was null or undefined when calling getEndpointApiV1AppAppIdEndpointEndpointIdGet.');
            }
            const localVarPath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}/'
                .replace('{' + 'endpoint_id' + '}', encodeURIComponent(String(endpointId)))
                .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)));
            const requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
            requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
            let authMethod = null;
            authMethod = _config.authMethods["HTTPBearer"];
            if (authMethod) {
                yield authMethod.applySecurityAuthentication(requestContext);
            }
            return requestContext;
        });
    }
    getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGet(endpointId, appId, _options) {
        return __awaiter(this, void 0, void 0, function* () {
            let _config = _options || this.configuration;
            if (endpointId === null || endpointId === undefined) {
                throw new baseapi_1.RequiredError('Required parameter endpointId was null or undefined when calling getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGet.');
            }
            if (appId === null || appId === undefined) {
                throw new baseapi_1.RequiredError('Required parameter appId was null or undefined when calling getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGet.');
            }
            const localVarPath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}/secret/'
                .replace('{' + 'endpoint_id' + '}', encodeURIComponent(String(endpointId)))
                .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)));
            const requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
            requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
            let authMethod = null;
            authMethod = _config.authMethods["HTTPBearer"];
            if (authMethod) {
                yield authMethod.applySecurityAuthentication(requestContext);
            }
            return requestContext;
        });
    }
    getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGet(endpointId, appId, _options) {
        return __awaiter(this, void 0, void 0, function* () {
            let _config = _options || this.configuration;
            if (endpointId === null || endpointId === undefined) {
                throw new baseapi_1.RequiredError('Required parameter endpointId was null or undefined when calling getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGet.');
            }
            if (appId === null || appId === undefined) {
                throw new baseapi_1.RequiredError('Required parameter appId was null or undefined when calling getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGet.');
            }
            const localVarPath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}/stats/'
                .replace('{' + 'endpoint_id' + '}', encodeURIComponent(String(endpointId)))
                .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)));
            const requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
            requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
            let authMethod = null;
            authMethod = _config.authMethods["HTTPBearer"];
            if (authMethod) {
                yield authMethod.applySecurityAuthentication(requestContext);
            }
            return requestContext;
        });
    }
    listEndpointsApiV1AppAppIdEndpointGet(appId, iterator, limit, _options) {
        return __awaiter(this, void 0, void 0, function* () {
            let _config = _options || this.configuration;
            if (appId === null || appId === undefined) {
                throw new baseapi_1.RequiredError('Required parameter appId was null or undefined when calling listEndpointsApiV1AppAppIdEndpointGet.');
            }
            const localVarPath = '/api/v1/app/{app_id}/endpoint/'
                .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)));
            const requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.GET);
            requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
            if (iterator !== undefined) {
                requestContext.setQueryParam("iterator", ObjectSerializer_1.ObjectSerializer.serialize(iterator, "string", ""));
            }
            if (limit !== undefined) {
                requestContext.setQueryParam("limit", ObjectSerializer_1.ObjectSerializer.serialize(limit, "number", ""));
            }
            let authMethod = null;
            authMethod = _config.authMethods["HTTPBearer"];
            if (authMethod) {
                yield authMethod.applySecurityAuthentication(requestContext);
            }
            return requestContext;
        });
    }
    updateEndpointApiV1AppAppIdEndpointEndpointIdPut(endpointId, appId, endpointIn, _options) {
        return __awaiter(this, void 0, void 0, function* () {
            let _config = _options || this.configuration;
            if (endpointId === null || endpointId === undefined) {
                throw new baseapi_1.RequiredError('Required parameter endpointId was null or undefined when calling updateEndpointApiV1AppAppIdEndpointEndpointIdPut.');
            }
            if (appId === null || appId === undefined) {
                throw new baseapi_1.RequiredError('Required parameter appId was null or undefined when calling updateEndpointApiV1AppAppIdEndpointEndpointIdPut.');
            }
            if (endpointIn === null || endpointIn === undefined) {
                throw new baseapi_1.RequiredError('Required parameter endpointIn was null or undefined when calling updateEndpointApiV1AppAppIdEndpointEndpointIdPut.');
            }
            const localVarPath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}/'
                .replace('{' + 'endpoint_id' + '}', encodeURIComponent(String(endpointId)))
                .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)));
            const requestContext = _config.baseServer.makeRequestContext(localVarPath, http_1.HttpMethod.PUT);
            requestContext.setHeaderParam("Accept", "application/json, */*;q=0.8");
            const contentType = ObjectSerializer_1.ObjectSerializer.getPreferredMediaType([
                "application/json"
            ]);
            requestContext.setHeaderParam("Content-Type", contentType);
            const serializedBody = ObjectSerializer_1.ObjectSerializer.stringify(ObjectSerializer_1.ObjectSerializer.serialize(endpointIn, "EndpointIn", ""), contentType);
            requestContext.setBody(serializedBody);
            let authMethod = null;
            authMethod = _config.authMethods["HTTPBearer"];
            if (authMethod) {
                yield authMethod.applySecurityAuthentication(requestContext);
            }
            return requestContext;
        });
    }
}
exports.EndpointApiRequestFactory = EndpointApiRequestFactory;
class EndpointApiResponseProcessor {
    createEndpointApiV1AppAppIdEndpointPost(response) {
        return __awaiter(this, void 0, void 0, function* () {
            const contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
            if (util_1.isCodeInRange("201", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "EndpointOut", "");
                return body;
            }
            if (util_1.isCodeInRange("401", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(401, body);
            }
            if (util_1.isCodeInRange("403", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(403, body);
            }
            if (util_1.isCodeInRange("404", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(404, body);
            }
            if (util_1.isCodeInRange("409", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(409, body);
            }
            if (util_1.isCodeInRange("422", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HTTPValidationError", "");
                throw new exception_1.ApiException(422, body);
            }
            if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "EndpointOut", "");
                return body;
            }
            let body = response.body || "";
            throw new exception_1.ApiException(response.httpStatusCode, "Unknown API Status Code!\nBody: \"" + body + "\"");
        });
    }
    deleteEndpointApiV1AppAppIdEndpointEndpointIdDelete(response) {
        return __awaiter(this, void 0, void 0, function* () {
            const contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
            if (util_1.isCodeInRange("204", response.httpStatusCode)) {
                return;
            }
            if (util_1.isCodeInRange("401", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(401, body);
            }
            if (util_1.isCodeInRange("403", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(403, body);
            }
            if (util_1.isCodeInRange("404", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(404, body);
            }
            if (util_1.isCodeInRange("409", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(409, body);
            }
            if (util_1.isCodeInRange("422", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HTTPValidationError", "");
                throw new exception_1.ApiException(422, body);
            }
            if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "void", "");
                return body;
            }
            let body = response.body || "";
            throw new exception_1.ApiException(response.httpStatusCode, "Unknown API Status Code!\nBody: \"" + body + "\"");
        });
    }
    getEndpointApiV1AppAppIdEndpointEndpointIdGet(response) {
        return __awaiter(this, void 0, void 0, function* () {
            const contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
            if (util_1.isCodeInRange("200", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "EndpointOut", "");
                return body;
            }
            if (util_1.isCodeInRange("401", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(401, body);
            }
            if (util_1.isCodeInRange("403", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(403, body);
            }
            if (util_1.isCodeInRange("404", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(404, body);
            }
            if (util_1.isCodeInRange("409", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(409, body);
            }
            if (util_1.isCodeInRange("422", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HTTPValidationError", "");
                throw new exception_1.ApiException(422, body);
            }
            if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "EndpointOut", "");
                return body;
            }
            let body = response.body || "";
            throw new exception_1.ApiException(response.httpStatusCode, "Unknown API Status Code!\nBody: \"" + body + "\"");
        });
    }
    getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGet(response) {
        return __awaiter(this, void 0, void 0, function* () {
            const contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
            if (util_1.isCodeInRange("200", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "EndpointSecretOut", "");
                return body;
            }
            if (util_1.isCodeInRange("401", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(401, body);
            }
            if (util_1.isCodeInRange("403", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(403, body);
            }
            if (util_1.isCodeInRange("404", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(404, body);
            }
            if (util_1.isCodeInRange("409", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(409, body);
            }
            if (util_1.isCodeInRange("422", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HTTPValidationError", "");
                throw new exception_1.ApiException(422, body);
            }
            if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "EndpointSecretOut", "");
                return body;
            }
            let body = response.body || "";
            throw new exception_1.ApiException(response.httpStatusCode, "Unknown API Status Code!\nBody: \"" + body + "\"");
        });
    }
    getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGet(response) {
        return __awaiter(this, void 0, void 0, function* () {
            const contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
            if (util_1.isCodeInRange("200", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "EndpointStats", "");
                return body;
            }
            if (util_1.isCodeInRange("401", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(401, body);
            }
            if (util_1.isCodeInRange("403", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(403, body);
            }
            if (util_1.isCodeInRange("404", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(404, body);
            }
            if (util_1.isCodeInRange("409", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(409, body);
            }
            if (util_1.isCodeInRange("422", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HTTPValidationError", "");
                throw new exception_1.ApiException(422, body);
            }
            if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "EndpointStats", "");
                return body;
            }
            let body = response.body || "";
            throw new exception_1.ApiException(response.httpStatusCode, "Unknown API Status Code!\nBody: \"" + body + "\"");
        });
    }
    listEndpointsApiV1AppAppIdEndpointGet(response) {
        return __awaiter(this, void 0, void 0, function* () {
            const contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
            if (util_1.isCodeInRange("200", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "ListResponseEndpointOut", "");
                return body;
            }
            if (util_1.isCodeInRange("401", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(401, body);
            }
            if (util_1.isCodeInRange("403", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(403, body);
            }
            if (util_1.isCodeInRange("404", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(404, body);
            }
            if (util_1.isCodeInRange("409", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(409, body);
            }
            if (util_1.isCodeInRange("422", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HTTPValidationError", "");
                throw new exception_1.ApiException(422, body);
            }
            if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "ListResponseEndpointOut", "");
                return body;
            }
            let body = response.body || "";
            throw new exception_1.ApiException(response.httpStatusCode, "Unknown API Status Code!\nBody: \"" + body + "\"");
        });
    }
    updateEndpointApiV1AppAppIdEndpointEndpointIdPut(response) {
        return __awaiter(this, void 0, void 0, function* () {
            const contentType = ObjectSerializer_1.ObjectSerializer.normalizeMediaType(response.headers["content-type"]);
            if (util_1.isCodeInRange("200", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "EndpointOut", "");
                return body;
            }
            if (util_1.isCodeInRange("401", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(401, body);
            }
            if (util_1.isCodeInRange("403", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(403, body);
            }
            if (util_1.isCodeInRange("404", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(404, body);
            }
            if (util_1.isCodeInRange("409", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HttpErrorOut", "");
                throw new exception_1.ApiException(409, body);
            }
            if (util_1.isCodeInRange("422", response.httpStatusCode)) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "HTTPValidationError", "");
                throw new exception_1.ApiException(422, body);
            }
            if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {
                const body = ObjectSerializer_1.ObjectSerializer.deserialize(ObjectSerializer_1.ObjectSerializer.parse(yield response.body.text(), contentType), "EndpointOut", "");
                return body;
            }
            let body = response.body || "";
            throw new exception_1.ApiException(response.httpStatusCode, "Unknown API Status Code!\nBody: \"" + body + "\"");
        });
    }
}
exports.EndpointApiResponseProcessor = EndpointApiResponseProcessor;
//# sourceMappingURL=EndpointApi.js.map