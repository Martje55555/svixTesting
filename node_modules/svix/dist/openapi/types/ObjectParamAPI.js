"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObjectMessageAttemptApi = exports.ObjectMessageApi = exports.ObjectHealthApi = exports.ObjectEventTypeApi = exports.ObjectEndpointApi = exports.ObjectAuthenticationApi = exports.ObjectApplicationApi = void 0;
const ObservableAPI_1 = require("./ObservableAPI");
class ObjectApplicationApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_1.ObservableApplicationApi(configuration, requestFactory, responseProcessor);
    }
    createApplicationApiV1AppPost(param, options) {
        return this.api.createApplicationApiV1AppPost(param.applicationIn, options).toPromise();
    }
    deleteApplicationApiV1AppAppIdDelete(param, options) {
        return this.api.deleteApplicationApiV1AppAppIdDelete(param.appId, options).toPromise();
    }
    getApplicationApiV1AppAppIdGet(param, options) {
        return this.api.getApplicationApiV1AppAppIdGet(param.appId, options).toPromise();
    }
    listApplicationsApiV1AppGet(param, options) {
        return this.api.listApplicationsApiV1AppGet(param.iterator, param.limit, options).toPromise();
    }
    updateApplicationApiV1AppAppIdPut(param, options) {
        return this.api.updateApplicationApiV1AppAppIdPut(param.appId, param.applicationIn, options).toPromise();
    }
}
exports.ObjectApplicationApi = ObjectApplicationApi;
const ObservableAPI_2 = require("./ObservableAPI");
class ObjectAuthenticationApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_2.ObservableAuthenticationApi(configuration, requestFactory, responseProcessor);
    }
    getDashboardAccessApiV1AuthDashboardAccessAppIdPost(param, options) {
        return this.api.getDashboardAccessApiV1AuthDashboardAccessAppIdPost(param.appId, options).toPromise();
    }
    logoutApiV1AuthLogoutPost(param, options) {
        return this.api.logoutApiV1AuthLogoutPost(options).toPromise();
    }
}
exports.ObjectAuthenticationApi = ObjectAuthenticationApi;
const ObservableAPI_3 = require("./ObservableAPI");
class ObjectEndpointApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_3.ObservableEndpointApi(configuration, requestFactory, responseProcessor);
    }
    createEndpointApiV1AppAppIdEndpointPost(param, options) {
        return this.api.createEndpointApiV1AppAppIdEndpointPost(param.appId, param.endpointIn, options).toPromise();
    }
    deleteEndpointApiV1AppAppIdEndpointEndpointIdDelete(param, options) {
        return this.api.deleteEndpointApiV1AppAppIdEndpointEndpointIdDelete(param.endpointId, param.appId, options).toPromise();
    }
    getEndpointApiV1AppAppIdEndpointEndpointIdGet(param, options) {
        return this.api.getEndpointApiV1AppAppIdEndpointEndpointIdGet(param.endpointId, param.appId, options).toPromise();
    }
    getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGet(param, options) {
        return this.api.getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGet(param.endpointId, param.appId, options).toPromise();
    }
    getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGet(param, options) {
        return this.api.getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGet(param.endpointId, param.appId, options).toPromise();
    }
    listEndpointsApiV1AppAppIdEndpointGet(param, options) {
        return this.api.listEndpointsApiV1AppAppIdEndpointGet(param.appId, param.iterator, param.limit, options).toPromise();
    }
    updateEndpointApiV1AppAppIdEndpointEndpointIdPut(param, options) {
        return this.api.updateEndpointApiV1AppAppIdEndpointEndpointIdPut(param.endpointId, param.appId, param.endpointIn, options).toPromise();
    }
}
exports.ObjectEndpointApi = ObjectEndpointApi;
const ObservableAPI_4 = require("./ObservableAPI");
class ObjectEventTypeApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_4.ObservableEventTypeApi(configuration, requestFactory, responseProcessor);
    }
    createEventTypeApiV1EventTypePost(param, options) {
        return this.api.createEventTypeApiV1EventTypePost(param.eventTypeIn, options).toPromise();
    }
    deleteEventTypeApiV1EventTypeEventTypeNameDelete(param, options) {
        return this.api.deleteEventTypeApiV1EventTypeEventTypeNameDelete(param.eventTypeName, options).toPromise();
    }
    listEventTypesApiV1EventTypeGet(param, options) {
        return this.api.listEventTypesApiV1EventTypeGet(param.iterator, param.limit, options).toPromise();
    }
    updateEventTypeApiV1EventTypeEventTypeNamePut(param, options) {
        return this.api.updateEventTypeApiV1EventTypeEventTypeNamePut(param.eventTypeName, param.eventTypeUpdate, options).toPromise();
    }
}
exports.ObjectEventTypeApi = ObjectEventTypeApi;
const ObservableAPI_5 = require("./ObservableAPI");
class ObjectHealthApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_5.ObservableHealthApi(configuration, requestFactory, responseProcessor);
    }
    healthApiV1HealthGet(param, options) {
        return this.api.healthApiV1HealthGet(options).toPromise();
    }
}
exports.ObjectHealthApi = ObjectHealthApi;
const ObservableAPI_6 = require("./ObservableAPI");
class ObjectMessageApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_6.ObservableMessageApi(configuration, requestFactory, responseProcessor);
    }
    createMessageApiV1AppAppIdMsgPost(param, options) {
        return this.api.createMessageApiV1AppAppIdMsgPost(param.appId, param.messageIn, options).toPromise();
    }
    getMessageApiV1AppAppIdMsgMsgIdGet(param, options) {
        return this.api.getMessageApiV1AppAppIdMsgMsgIdGet(param.msgId, param.appId, options).toPromise();
    }
    listMessagesApiV1AppAppIdMsgGet(param, options) {
        return this.api.listMessagesApiV1AppAppIdMsgGet(param.appId, param.iterator, param.limit, options).toPromise();
    }
}
exports.ObjectMessageApi = ObjectMessageApi;
const ObservableAPI_7 = require("./ObservableAPI");
class ObjectMessageAttemptApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_7.ObservableMessageAttemptApi(configuration, requestFactory, responseProcessor);
    }
    getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGet(param, options) {
        return this.api.getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGet(param.attemptId, param.msgId, param.appId, options).toPromise();
    }
    listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGet(param, options) {
        return this.api.listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGet(param.msgId, param.appId, param.iterator, param.limit, options).toPromise();
    }
    listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGet(param, options) {
        return this.api.listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGet(param.endpointId, param.appId, param.iterator, param.limit, param.status, options).toPromise();
    }
    listAttemptsApiV1AppAppIdMsgMsgIdAttemptGet(param, options) {
        return this.api.listAttemptsApiV1AppAppIdMsgMsgIdAttemptGet(param.msgId, param.appId, param.iterator, param.limit, param.status, options).toPromise();
    }
    listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGet(param, options) {
        return this.api.listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGet(param.msgId, param.appId, param.endpointId, param.iterator, param.limit, param.status, options).toPromise();
    }
    resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPost(param, options) {
        return this.api.resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPost(param.endpointId, param.msgId, param.appId, options).toPromise();
    }
}
exports.ObjectMessageAttemptApi = ObjectMessageAttemptApi;
//# sourceMappingURL=ObjectParamAPI.js.map