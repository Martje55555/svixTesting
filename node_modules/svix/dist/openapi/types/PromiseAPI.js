"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PromiseMessageAttemptApi = exports.PromiseMessageApi = exports.PromiseHealthApi = exports.PromiseEventTypeApi = exports.PromiseEndpointApi = exports.PromiseAuthenticationApi = exports.PromiseApplicationApi = void 0;
const ObservableAPI_1 = require("./ObservableAPI");
class PromiseApplicationApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_1.ObservableApplicationApi(configuration, requestFactory, responseProcessor);
    }
    createApplicationApiV1AppPost(applicationIn, _options) {
        const result = this.api.createApplicationApiV1AppPost(applicationIn, _options);
        return result.toPromise();
    }
    deleteApplicationApiV1AppAppIdDelete(appId, _options) {
        const result = this.api.deleteApplicationApiV1AppAppIdDelete(appId, _options);
        return result.toPromise();
    }
    getApplicationApiV1AppAppIdGet(appId, _options) {
        const result = this.api.getApplicationApiV1AppAppIdGet(appId, _options);
        return result.toPromise();
    }
    listApplicationsApiV1AppGet(iterator, limit, _options) {
        const result = this.api.listApplicationsApiV1AppGet(iterator, limit, _options);
        return result.toPromise();
    }
    updateApplicationApiV1AppAppIdPut(appId, applicationIn, _options) {
        const result = this.api.updateApplicationApiV1AppAppIdPut(appId, applicationIn, _options);
        return result.toPromise();
    }
}
exports.PromiseApplicationApi = PromiseApplicationApi;
const ObservableAPI_2 = require("./ObservableAPI");
class PromiseAuthenticationApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_2.ObservableAuthenticationApi(configuration, requestFactory, responseProcessor);
    }
    getDashboardAccessApiV1AuthDashboardAccessAppIdPost(appId, _options) {
        const result = this.api.getDashboardAccessApiV1AuthDashboardAccessAppIdPost(appId, _options);
        return result.toPromise();
    }
    logoutApiV1AuthLogoutPost(_options) {
        const result = this.api.logoutApiV1AuthLogoutPost(_options);
        return result.toPromise();
    }
}
exports.PromiseAuthenticationApi = PromiseAuthenticationApi;
const ObservableAPI_3 = require("./ObservableAPI");
class PromiseEndpointApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_3.ObservableEndpointApi(configuration, requestFactory, responseProcessor);
    }
    createEndpointApiV1AppAppIdEndpointPost(appId, endpointIn, _options) {
        const result = this.api.createEndpointApiV1AppAppIdEndpointPost(appId, endpointIn, _options);
        return result.toPromise();
    }
    deleteEndpointApiV1AppAppIdEndpointEndpointIdDelete(endpointId, appId, _options) {
        const result = this.api.deleteEndpointApiV1AppAppIdEndpointEndpointIdDelete(endpointId, appId, _options);
        return result.toPromise();
    }
    getEndpointApiV1AppAppIdEndpointEndpointIdGet(endpointId, appId, _options) {
        const result = this.api.getEndpointApiV1AppAppIdEndpointEndpointIdGet(endpointId, appId, _options);
        return result.toPromise();
    }
    getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGet(endpointId, appId, _options) {
        const result = this.api.getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGet(endpointId, appId, _options);
        return result.toPromise();
    }
    getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGet(endpointId, appId, _options) {
        const result = this.api.getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGet(endpointId, appId, _options);
        return result.toPromise();
    }
    listEndpointsApiV1AppAppIdEndpointGet(appId, iterator, limit, _options) {
        const result = this.api.listEndpointsApiV1AppAppIdEndpointGet(appId, iterator, limit, _options);
        return result.toPromise();
    }
    updateEndpointApiV1AppAppIdEndpointEndpointIdPut(endpointId, appId, endpointIn, _options) {
        const result = this.api.updateEndpointApiV1AppAppIdEndpointEndpointIdPut(endpointId, appId, endpointIn, _options);
        return result.toPromise();
    }
}
exports.PromiseEndpointApi = PromiseEndpointApi;
const ObservableAPI_4 = require("./ObservableAPI");
class PromiseEventTypeApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_4.ObservableEventTypeApi(configuration, requestFactory, responseProcessor);
    }
    createEventTypeApiV1EventTypePost(eventTypeIn, _options) {
        const result = this.api.createEventTypeApiV1EventTypePost(eventTypeIn, _options);
        return result.toPromise();
    }
    deleteEventTypeApiV1EventTypeEventTypeNameDelete(eventTypeName, _options) {
        const result = this.api.deleteEventTypeApiV1EventTypeEventTypeNameDelete(eventTypeName, _options);
        return result.toPromise();
    }
    listEventTypesApiV1EventTypeGet(iterator, limit, _options) {
        const result = this.api.listEventTypesApiV1EventTypeGet(iterator, limit, _options);
        return result.toPromise();
    }
    updateEventTypeApiV1EventTypeEventTypeNamePut(eventTypeName, eventTypeUpdate, _options) {
        const result = this.api.updateEventTypeApiV1EventTypeEventTypeNamePut(eventTypeName, eventTypeUpdate, _options);
        return result.toPromise();
    }
}
exports.PromiseEventTypeApi = PromiseEventTypeApi;
const ObservableAPI_5 = require("./ObservableAPI");
class PromiseHealthApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_5.ObservableHealthApi(configuration, requestFactory, responseProcessor);
    }
    healthApiV1HealthGet(_options) {
        const result = this.api.healthApiV1HealthGet(_options);
        return result.toPromise();
    }
}
exports.PromiseHealthApi = PromiseHealthApi;
const ObservableAPI_6 = require("./ObservableAPI");
class PromiseMessageApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_6.ObservableMessageApi(configuration, requestFactory, responseProcessor);
    }
    createMessageApiV1AppAppIdMsgPost(appId, messageIn, _options) {
        const result = this.api.createMessageApiV1AppAppIdMsgPost(appId, messageIn, _options);
        return result.toPromise();
    }
    getMessageApiV1AppAppIdMsgMsgIdGet(msgId, appId, _options) {
        const result = this.api.getMessageApiV1AppAppIdMsgMsgIdGet(msgId, appId, _options);
        return result.toPromise();
    }
    listMessagesApiV1AppAppIdMsgGet(appId, iterator, limit, _options) {
        const result = this.api.listMessagesApiV1AppAppIdMsgGet(appId, iterator, limit, _options);
        return result.toPromise();
    }
}
exports.PromiseMessageApi = PromiseMessageApi;
const ObservableAPI_7 = require("./ObservableAPI");
class PromiseMessageAttemptApi {
    constructor(configuration, requestFactory, responseProcessor) {
        this.api = new ObservableAPI_7.ObservableMessageAttemptApi(configuration, requestFactory, responseProcessor);
    }
    getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGet(attemptId, msgId, appId, _options) {
        const result = this.api.getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGet(attemptId, msgId, appId, _options);
        return result.toPromise();
    }
    listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGet(msgId, appId, iterator, limit, _options) {
        const result = this.api.listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGet(msgId, appId, iterator, limit, _options);
        return result.toPromise();
    }
    listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGet(endpointId, appId, iterator, limit, status, _options) {
        const result = this.api.listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGet(endpointId, appId, iterator, limit, status, _options);
        return result.toPromise();
    }
    listAttemptsApiV1AppAppIdMsgMsgIdAttemptGet(msgId, appId, iterator, limit, status, _options) {
        const result = this.api.listAttemptsApiV1AppAppIdMsgMsgIdAttemptGet(msgId, appId, iterator, limit, status, _options);
        return result.toPromise();
    }
    listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGet(msgId, appId, endpointId, iterator, limit, status, _options) {
        const result = this.api.listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGet(msgId, appId, endpointId, iterator, limit, status, _options);
        return result.toPromise();
    }
    resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPost(endpointId, msgId, appId, _options) {
        const result = this.api.resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPost(endpointId, msgId, appId, _options);
        return result.toPromise();
    }
}
exports.PromiseMessageAttemptApi = PromiseMessageAttemptApi;
//# sourceMappingURL=PromiseAPI.js.map